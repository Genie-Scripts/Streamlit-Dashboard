import streamlit as st
import pandas as pd
import json
import requests
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import base64
from pathlib import Path
import time
import re
import os
import hashlib

class HTMLDashboardPublisher:
    """Â§ñÈÉ®HTML„Éï„Ç°„Ç§„É´„ÇíÁµ±Âêà„Åó„Å¶GitHub Pages„Å´ÂÖ¨Èñã„Åô„Çã„ÇØ„É©„Çπ"""

    def __init__(self, repo_owner: str, repo_name: str, token: str, branch: str = "main"):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.token = token
        self.branch = branch
        self.base_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}"

    def create_dashboard_index(self, html_files: List[Dict[str, str]], config: Dict, enable_ga: bool = False) -> str:
        """Áµ±Âêà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆindex.html„ÇíÁîüÊàê"""

        # Google Analytics Tag (G-58EZXED4D4)
        google_analytics_tag = """
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-58EZXED4D4"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){{dataLayer.push(arguments);}}
      gtag('js', new Date());

      gtag('config', 'G-58EZXED4D4');
    </script>
""" if enable_ga else ""

        dashboard_items = ""
        for file_info in html_files:
            dashboard_items += f"""
            <div class="dashboard-card" onclick="window.location.href='{file_info['filename']}'">
                <div class="card-icon">{file_info.get('icon', 'üìä')}</div>
                <div class="card-content">
                    <h3>{file_info['title']}</h3>
                    <p>{file_info.get('description', '')}</p>
                    <span class="update-time">Êõ¥Êñ∞: {file_info.get('update_time', '‰∏çÊòé')}</span>
                </div>
                <div class="card-arrow">‚Ä∫</div>
            </div>
            """

        html_content = f"""<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{config.get('dashboard_title', '„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ')}</title>
    {google_analytics_tag}
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans JP', sans-serif;
            background: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }}

        .header {{
            background: linear-gradient(135deg, {{config.get('primary_color', '#667eea')}} 0%, {{config.get('secondary_color', '#764ba2')}} 100%);
            color: white;
            padding: 60px 20px 40px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}

        .header h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 700;
        }}

        .header p {{
            font-size: 1.2em;
            opacity: 0.9;
        }}

        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }}

        .dashboard-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }}

        .dashboard-card {{
            background: white;
            border-radius: 12px;
            padding: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            display: flex;
            align-items: center;
            gap: 20px;
            position: relative;
            overflow: hidden;
        }}

        .dashboard-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }}

        .dashboard-card::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, {{config.get('primary_color', '#667eea')}} 0%, {{config.get('secondary_color', '#764ba2')}} 100%);
            transition: width 0.3s ease;
        }}

        .dashboard-card:hover::before {{
            width: 8px;
        }}

        .card-icon {{
            font-size: 3em;
            min-width: 60px;
            text-align: center;
        }}

        .card-content {{
            flex: 1;
        }}

        .card-content h3 {{
            font-size: 1.3em;
            margin-bottom: 8px;
            color: #2d3748;
            font-weight: 600;
        }}

        .card-content p {{
            color: #718096;
            font-size: 0.95em;
            line-height: 1.5;
            margin-bottom: 10px;
        }}

        .update-time {{
            font-size: 0.85em;
            color: #a0aec0;
            display: inline-block;
            background: #f7fafc;
            padding: 4px 10px;
            border-radius: 20px;
        }}

        .card-arrow {{
            font-size: 2em;
            color: #cbd5e0;
            margin-left: 10px;
        }}

        .dashboard-card:hover .card-arrow {{
            color: {{config.get('primary_color', '#667eea')}};
            transform: translateX(5px);
            transition: all 0.3s ease;
        }}

        .stats-container {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }}

        .stat-box {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }}

        .stat-box h4 {{
            color: #718096;
            font-size: 0.9em;
            margin-bottom: 5px;
            font-weight: normal;
        }}

        .stat-box .stat-value {{
            font-size: 2em;
            font-weight: 700;
            color: {{config.get('primary_color', '#667eea')}};
        }}

        .footer {{
            text-align: center;
            padding: 40px 20px;
            color: #718096;
            border-top: 1px solid #e2e8f0;
            margin-top: 60px;
        }}

        .footer p {{
            margin-bottom: 10px;
        }}

        @media (max-width: 768px) {{
            .header h1 {{
                font-size: 2em;
            }}

            .dashboard-grid {{
                grid-template-columns: 1fr;
                gap: 15px;
            }}

            .dashboard-card {{
                padding: 20px;
            }}

            .card-icon {{
                font-size: 2.5em;
            }}

            .stats-container {{
                grid-template-columns: 1fr;
            }}
        }}

        /* „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ */
        @keyframes fadeIn {{
            from {{
                opacity: 0;
                transform: translateY(20px);
            }}
            to {{
                opacity: 1;
                transform: translateY(0);
            }}
        }}

        .dashboard-card {{
            animation: fadeIn 0.5s ease-out;
        }}

        .dashboard-card:nth-child(1) {{ animation-delay: 0.1s; }}
        .dashboard-card:nth-child(2) {{ animation-delay: 0.2s; }}
        .dashboard-card:nth-child(3) {{ animation-delay: 0.3s; }}
        .dashboard-card:nth-child(4) {{ animation-delay: 0.4s; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{config.get('header_icon', 'üè•')} {config.get('dashboard_title', '„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ')}</h1>
        <p>{config.get('dashboard_subtitle', 'Áµ±Âêà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ')}</p>
    </div>

    <div class="container">
        {f'''
        <div class="stats-container">
            <div class="stat-box">
                <h4>Á∑è„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊï∞</h4>
                <div class="stat-value">{len(html_files)}</div>
            </div>
            <div class="stat-box">
                <h4>ÊúÄÁµÇÊõ¥Êñ∞</h4>
                <div class="stat-value">{datetime.now().strftime('%m/%d')}</div>
            </div>
            <div class="stat-box">
                <h4>„Çπ„ÉÜ„Éº„Çø„Çπ</h4>
                <div class="stat-value">‚úÖ</div>
            </div>
        </div>
        ''' if config.get('show_stats', True) else ''}

        <div class="dashboard-grid">
            {dashboard_items}
        </div>
    </div>

    <div class="footer">
        <p>{config.get('footer_text', '¬© 2025 Dashboard System')}</p>
        <p>ÊúÄÁµÇÊõ¥Êñ∞: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}</p>
    </div>
</body>
</html>"""

        return html_content

    def process_html_file(self, html_content: str, filename: str) -> str:
        """HTML„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜÔºà„É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú„ÄÅ„Éõ„Éº„É†„Éú„Çø„É≥ËøΩÂä†„Å™„Å©Ôºâ"""

        # „É¨„Çπ„Éù„É≥„Ç∑„ÉñCSSËøΩÂä†
        responsive_css = """
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            /* „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú */
            @media (max-width: 768px) {
                body { font-size: 14px; }
                table { font-size: 12px; }
                .container { padding: 10px; }
            }

            /* „Éõ„Éº„É†„Éú„Çø„É≥ */
            .home-button {
                position: fixed;
                bottom: 30px;
                right: 30px;
                width: 60px;
                height: 60px;
                border-radius: 50%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                text-decoration: none;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
                z-index: 9999;
                font-size: 1.5em;
            }

            .home-button:hover {
                transform: scale(1.1);
                box-shadow: 0 6px 20px rgba(0,0,0,0.4);
            }

            @media print {
                .home-button { display: none; }
            }
        </style>
        """

        # „Éõ„Éº„É†„Éú„Çø„É≥ËøΩÂä†
        home_button = """
        <a href="./index.html" class="home-button" title="„Éõ„Éº„É†„Å´Êàª„Çã">üè†</a>
        """

        # HTML„ÅÆÂá¶ÁêÜ
        if '</head>' in html_content:
            html_content = html_content.replace('</head>', f'{responsive_css}</head>')
        else:
            # head„Çø„Ç∞„Åå„Å™„ÅÑÂ†¥Âêà„ÅØËøΩÂä†
            html_content = f'<head>{responsive_css}</head>' + html_content

        if '</body>' in html_content:
            html_content = html_content.replace('</body>', f'{home_button}</body>')
        else:
            # body„Çø„Ç∞„Åå„Å™„ÅÑÂ†¥Âêà„ÅØËøΩÂä†
            html_content = html_content + f'{home_button}'

        return html_content

    def upload_file(self, content: str, filename: str) -> Tuple[bool, str]:
        """GitHub„Å´„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ"""

        try:
            file_path = f"docs/{filename}"
            url = f"{self.base_url}/contents/{file_path}"

            headers = {
                "Authorization": f"token {self.token}",
                "Accept": "application/vnd.github.v3+json"
            }

            # Êó¢Â≠ò„Éï„Ç°„Ç§„É´„ÅÆSHAÂèñÂæó
            response = requests.get(url, headers=headers)
            sha = response.json().get("sha") if response.status_code == 200 else None

            # „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆBase64„Ç®„É≥„Ç≥„Éº„Éâ
            content_encoded = base64.b64encode(content.encode('utf-8')).decode('utf-8')

            # „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Éº„Çø
            data = {
                "message": f"Update {filename} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "content": content_encoded,
                "branch": self.branch
            }
            if sha:
                data["sha"] = sha

            # „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆüË°å
            response = requests.put(url, json=data, headers=headers)

            if response.status_code in [200, 201]:
                return True, f"Successfully uploaded: {filename}"
            else:
                return False, f"Upload failed: {response.json().get('message', 'Unknown error')}"

        except Exception as e:
            return False, f"Error: {str(e)}"

    def get_public_url(self) -> str:
        """GitHub Pages„ÅÆURL„ÇíÂèñÂæó"""
        return f"https://{self.repo_owner}.github.io/{self.repo_name}/"

class DashboardMetadataManager:
    """„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆ„É°„Çø„Éá„Éº„Çø„ÇíÁÆ°ÁêÜ„Åô„Çã„ÇØ„É©„Çπ"""

    def __init__(self):
        self.metadata_template = {
            'button_name': '',
            'short_description': '',
            'long_description': '',
            'icon': 'üìä',
            'category': 'Êú™ÂàÜÈ°û',
            'tags': [],
            'priority': 100,
            'visible': True,
            'update_frequency': 'Êó•Ê¨°',
            'responsible_person': '',
            'data_source': '',
            'last_updated': '',
            'custom_css_class': ''
        }

    def create_metadata_form(self, file_info: Dict, index: int) -> Dict:
        """„É°„Çø„Éá„Éº„ÇøÂÖ•Âäõ„Éï„Ç©„Éº„É†„Çí‰ΩúÊàê"""

        with st.expander(f"üìÑ {file_info['filename']} „ÅÆË©≥Á¥∞Ë®≠ÂÆö", expanded=True):
            col1, col2, col3 = st.columns([2, 2, 1])

            with col1:
                # „Éú„Çø„É≥ÂêçÔºàÂøÖÈ†àÔºâ
                button_name = st.text_input(
                    "„Éú„Çø„É≥Ë°®Á§∫Âêç *",
                    value=file_info.get('title', file_info['filename'].replace('.html', '')),
                    key=f"btn_name_{index}",
                    help="„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ‰∏ÄË¶ß„ÅßË°®Á§∫„Åï„Çå„ÇãÂêçÂâç"
                )

                # Áü≠„ÅÑË™¨ÊòéÔºàÂøÖÈ†àÔºâ
                short_desc = st.text_input(
                    "Áü≠„ÅÑË™¨Êòé *",
                    value=file_info.get('description', ''),
                    key=f"short_desc_{index}",
                    help="„Éú„Çø„É≥„ÅÆ‰∏ã„Å´Ë°®Á§∫„Åï„Çå„Çã1Ë°åË™¨Êòé"
                )

                # „Ç´„ÉÜ„Ç¥„É™
                category = st.selectbox(
                    "„Ç´„ÉÜ„Ç¥„É™",
                    ["ÁµåÂñ∂ÂàÜÊûê", "Ë®∫ÁôÇÂÆüÁ∏æ", "ÁóÖÊ£üÁÆ°ÁêÜ", "Ë≤°ÂãôÂ†±Âëä", "ÂìÅË≥™ÊåáÊ®ô", "„Åù„ÅÆ‰ªñ"],
                    key=f"category_{index}"
                )

                # Êõ¥Êñ∞È†ªÂ∫¶
                update_freq = st.selectbox(
                    "Êõ¥Êñ∞È†ªÂ∫¶",
                    ["„É™„Ç¢„É´„Çø„Ç§„É†", "Êó•Ê¨°", "ÈÄ±Ê¨°", "ÊúàÊ¨°", "ÂõõÂçäÊúü", "Âπ¥Ê¨°", "‰∏çÂÆöÊúü"],
                    key=f"update_freq_{index}"
                )

            with col2:
                # „Ç¢„Ç§„Ç≥„É≥ÈÅ∏Êäû
                icon = st.selectbox(
                    "„Ç¢„Ç§„Ç≥„É≥",
                    ["üìä", "üìà", "üìâ", "üè•", "üè®", "üíä", "ü©∫", "üìã", "üìë", "üí∞", "üéØ", "‚ö°", "üîç", "üìÖ", "üåü"],
                    key=f"icon_{index}"
                )

                # Ë©≥Á¥∞Ë™¨Êòé
                long_desc = st.text_area(
                    "Ë©≥Á¥∞Ë™¨Êòé",
                    value='',
                    key=f"long_desc_{index}",
                    height=100,
                    help="„Çà„ÇäË©≥„Åó„ÅÑË™¨ÊòéÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ"
                )

                # „Çø„Ç∞
                tags_input = st.text_input(
                    "„Çø„Ç∞Ôºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ",
                    value='',
                    key=f"tags_{index}",
                    help="Ê§úÁ¥¢Áî®„ÅÆ„Çø„Ç∞: ‰æãÔºâÂÖ•Èô¢,Ë®∫ÁôÇÁßë,ÊúàÊ¨°"
                )

                # „Éá„Éº„Çø„ÇΩ„Éº„Çπ
                data_source = st.text_input(
                    "„Éá„Éº„Çø„ÇΩ„Éº„Çπ",
                    value='',
                    key=f"data_source_{index}",
                    help="„Éá„Éº„Çø„ÅÆÂá∫ÊâÄ„ÇÑ„Ç∑„Çπ„ÉÜ„É†Âêç"
                )

            with col3:
                # ÂÑ™ÂÖàÂ∫¶
                priority = st.number_input(
                    "Ë°®Á§∫ÂÑ™ÂÖàÂ∫¶",
                    min_value=1,
                    max_value=999,
                    value=100,
                    key=f"priority_{index}",
                    help="Â∞è„Åï„ÅÑÊï∞Â≠ó„Åª„Å©‰∏ä‰ΩçË°®Á§∫"
                )

                # Ë°®Á§∫/ÈùûË°®Á§∫
                visible = st.checkbox(
                    "Ë°®Á§∫„Åô„Çã",
                    value=True,
                    key=f"visible_{index}"
                )

                # Ë≤¨‰ªªËÄÖ
                responsible = st.text_input(
                    "Ë≤¨‰ªªËÄÖ",
                    value='',
                    key=f"responsible_{index}"
                )

                # „Ç´„Çπ„Çø„É†CSS
                css_class = st.text_input(
                    "CSS„ÇØ„É©„Çπ",
                    value='',
                    key=f"css_class_{index}",
                    help="„Ç´„Çπ„Çø„É†„Çπ„Çø„Ç§„É´Áî®"
                )

            # „Éó„É¨„Éì„É•„Éº
            if st.checkbox("„Éó„É¨„Éì„É•„Éº", key=f"preview_meta_{index}"):
                st.markdown("### „Ç´„Éº„Éâ„Éó„É¨„Éì„É•„Éº")
                self._render_card_preview(
                    button_name=button_name,
                    short_desc=short_desc,
                    icon=icon,
                    category=category,
                    update_time=datetime.now().strftime('%Y/%m/%d %H:%M')
                )

            # „É°„Çø„Éá„Éº„Çø„ÇíËøî„Åô
            return {
                'filename': file_info['filename'],
                'button_name': button_name,
                'short_description': short_desc,
                'long_description': long_desc,
                'icon': icon,
                'category': category,
                'tags': [tag.strip() for tag in tags_input.split(',') if tag.strip()],
                'priority': priority,
                'visible': visible,
                'update_frequency': update_freq,
                'responsible_person': responsible,
                'data_source': data_source,
                'last_updated': datetime.now().isoformat(),
                'custom_css_class': css_class
            }

    def _render_card_preview(self, button_name: str, short_desc: str,
                           icon: str, category: str, update_time: str):
        """„Ç´„Éº„Éâ„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíË°®Á§∫"""

        preview_html = f"""
        <div style="
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            border-left: 4px solid #667eea;
            cursor: pointer;
            transition: all 0.3s ease;
            max-width: 400px;
        ">
            <div style="display: flex; align-items: center; gap: 15px;">
                <div style="font-size: 2.5em;">{icon}</div>
                <div style="flex: 1;">
                    <h3 style="margin: 0 0 5px 0; color: #2d3748; font-size: 1.1em;">
                        {button_name}
                    </h3>
                    <p style="margin: 0 0 8px 0; color: #718096; font-size: 0.9em;">
                        {short_desc}
                    </p>
                    <div style="display: flex; gap: 10px; font-size: 0.8em;">
                        <span style="background: #f7fafc; padding: 2px 8px; border-radius: 10px; color: #4a5568;">
                            {category}
                        </span>
                        <span style="color: #a0aec0;">
                            Êõ¥Êñ∞: {update_time}
                        </span>
                    </div>
                </div>
                <div style="font-size: 1.5em; color: #cbd5e0;">‚Ä∫</div>
            </div>
        </div>
        """

        st.markdown(preview_html, unsafe_allow_html=True)

class FileNameConflictHandler:
    """„Éï„Ç°„Ç§„É´Âêç„ÅÆÁ´∂Âêà„ÇíÂá¶ÁêÜ„Åô„Çã„ÇØ„É©„Çπ"""

    # ‰∫àÁ¥Ñ„Åï„Çå„Åü„Éï„Ç°„Ç§„É´ÂêçÔºà„Ç∑„Çπ„ÉÜ„É†„Åß‰ΩøÁî®Ôºâ
    RESERVED_NAMES = [
        'index.html',
        'index.htm',
        '404.html',
        'robots.txt',
        'sitemap.xml',
        '.htaccess'
    ]

    # Â§âÊèõ„É´„Éº„É´
    RENAME_RULES = {
        'index.html': 'main-dashboard.html',
        'index.htm': 'main-dashboard.html',
        'home.html': 'home-dashboard.html',
        'default.html': 'default-dashboard.html'
    }

    @staticmethod
    def sanitize_filename(filename: str) -> str:
        """„Éï„Ç°„Ç§„É´Âêç„Çí„Çµ„Éã„Çø„Ç§„Ç∫ÔºàÂÆâÂÖ®„Å™ÂΩ¢Âºè„Å´Â§âÊèõÔºâ"""

        # Êã°ÂºµÂ≠ê„ÇíÂàÜÈõ¢
        name, ext = os.path.splitext(filename)

        # ÁâπÊÆäÊñáÂ≠ó„ÇíÁΩÆÊèõ
        name = re.sub(r'[<>:"/\\|?*]', '_', name)
        name = re.sub(r'[\s]+', '_', name)  # Á©∫ÁôΩ„Çí„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„Å´
        name = re.sub(r'[^\w\-_\.]', '', name)  # Ëã±Êï∞Â≠ó„ÄÅ„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÄÅ„Éâ„ÉÉ„Éà‰ª•Â§ñ„ÇíÂâäÈô§
        name = re.sub(r'_{2,}', '_', name)  # ÈÄ£Á∂ö„Åô„Çã„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„Çí1„Å§„Å´

        # ÂÖàÈ†≠„ÉªÊú´Â∞æ„ÅÆÁâπÊÆäÊñáÂ≠ó„ÇíÂâäÈô§
        name = name.strip('._-')

        # Á©∫„Å´„Å™„Å£„ÅüÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàÂêç
        if not name:
            name = f'file_{hashlib.md5(filename.encode()).hexdigest()[:8]}'

        # Êã°ÂºµÂ≠ê„ÇíÊàª„Åô
        return f"{name}{ext}"

    @staticmethod
    def check_conflict(filename: str, existing_files: List[str]) -> Tuple[bool, str]:
        """„Éï„Ç°„Ç§„É´Âêç„ÅÆÁ´∂Âêà„Çí„ÉÅ„Çß„ÉÉ„ÇØ"""

        # Â∞èÊñáÂ≠ó„ÅßÊØîËºÉÔºàÂ§ßÊñáÂ≠óÂ∞èÊñáÂ≠ó„ÇíÂå∫Âà•„Åó„Å™„ÅÑ„Ç∑„Çπ„ÉÜ„É†ÂØæÂøúÔºâ
        filename_lower = filename.lower()

        # ‰∫àÁ¥ÑÂêç„ÉÅ„Çß„ÉÉ„ÇØ
        if filename_lower in [name.lower() for name in FileNameConflictHandler.RESERVED_NAMES]:
            return True, "„Ç∑„Çπ„ÉÜ„É†‰∫àÁ¥Ñ„Éï„Ç°„Ç§„É´Âêç"

        # Êó¢Â≠ò„Éï„Ç°„Ç§„É´„Å®„ÅÆÁ´∂Âêà„ÉÅ„Çß„ÉÉ„ÇØ
        if filename_lower in [f.lower() for f in existing_files]:
            return True, "Êó¢Â≠ò„Éï„Ç°„Ç§„É´„Å®Á´∂Âêà"

        return False, ""

    @staticmethod
    def resolve_conflict(filename: str, existing_files: List[str]) -> str:
        """Á´∂Âêà„ÇíËß£Ê±∫„Åó„Å¶Êñ∞„Åó„ÅÑ„Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê"""

        # „Åæ„ÅöÂ§âÊèõ„É´„Éº„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if filename.lower() in FileNameConflictHandler.RENAME_RULES:
            new_name = FileNameConflictHandler.RENAME_RULES[filename.lower()]
            if new_name.lower() not in [f.lower() for f in existing_files]:
                return new_name

        # Áï™Âè∑‰ªò„Åë„ÅßËß£Ê±∫
        name, ext = os.path.splitext(filename)
        counter = 1

        while True:
            new_filename = f"{name}_{counter}{ext}"
            if new_filename.lower() not in [f.lower() for f in existing_files]:
                return new_filename
            counter += 1

    @staticmethod
    def generate_unique_id(filename: str) -> str:
        """„Éï„Ç°„Ç§„É´Âêç„Åã„Çâ„É¶„Éã„Éº„ÇØID„ÇíÁîüÊàê"""
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        hash_part = hashlib.md5(f"{filename}{timestamp}".encode()).hexdigest()[:6]
        return f"{timestamp}_{hash_part}"


def create_conflict_aware_uploader():
    """Á´∂ÂêàÂá¶ÁêÜÊ©üËÉΩ‰ªò„Åç„ÅÆ„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉÄ„Éº"""

    st.header("üì§ ÂÆâÂÖ®„Å™HTML„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ")

    # Êó¢Â≠ò„Éï„Ç°„Ç§„É´„É™„Çπ„Éà„ÅÆÁÆ°ÁêÜ
    if 'uploaded_files_list' not in st.session_state:
        st.session_state.uploaded_files_list = []

    # Á´∂Âêà„Éè„É≥„Éâ„É©„Éº
    handler = FileNameConflictHandler()

    # „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    uploaded_files = st.file_uploader(
        "HTML„Éï„Ç°„Ç§„É´„ÇíÈÅ∏ÊäûÔºàË§áÊï∞ÂèØÔºâ",
        type=['html', 'htm'],
        accept_multiple_files=True,
        help="index.html„Å™„Å©„ÅÆ‰∫àÁ¥ÑÂêç„ÅØËá™ÂãïÁöÑ„Å´„É™„Éç„Éº„É†„Åï„Çå„Åæ„Åô"
    )

    if uploaded_files:
        st.info(f"{len(uploaded_files)}ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ‰∏≠...")

        # Âá¶ÁêÜÁµêÊûú„ÇíÊ†ºÁ¥ç
        processing_results = []

        for file in uploaded_files:
            original_name = file.name

            # „Éï„Ç°„Ç§„É´Âêç„ÅÆ„Çµ„Éã„Çø„Ç§„Ç∫
            sanitized_name = handler.sanitize_filename(original_name)

            # Á´∂Âêà„ÉÅ„Çß„ÉÉ„ÇØ
            has_conflict, conflict_reason = handler.check_conflict(
                sanitized_name,
                st.session_state.uploaded_files_list
            )

            if has_conflict:
                # Á´∂ÂêàËß£Ê±∫
                resolved_name = handler.resolve_conflict(
                    sanitized_name,
                    st.session_state.uploaded_files_list
                )

                processing_results.append({
                    'original': original_name,
                    'sanitized': sanitized_name,
                    'final': resolved_name,
                    'status': 'renamed',
                    'reason': conflict_reason,
                    'file': file
                })
            else:
                processing_results.append({
                    'original': original_name,
                    'sanitized': sanitized_name,
                    'final': sanitized_name,
                    'status': 'ok',
                    'reason': '',
                    'file': file
                })

        # Âá¶ÁêÜÁµêÊûú„ÅÆË°®Á§∫
        st.markdown("### üìã „Éï„Ç°„Ç§„É´ÂêçÂá¶ÁêÜÁµêÊûú")

        # ÂïèÈ°å„ÅÆ„ÅÇ„Çã„Éï„Ç°„Ç§„É´„ÇíÂÖà„Å´Ë°®Á§∫
        renamed_files = [r for r in processing_results if r['status'] == 'renamed']
        ok_files = [r for r in processing_results if r['status'] == 'ok']

        if renamed_files:
            st.warning(f"‚ö†Ô∏è {len(renamed_files)}ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´„Åå„É™„Éç„Éº„É†„Åï„Çå„Åæ„Åô")

            for result in renamed_files:
                with st.expander(f"üîÑ {result['original']} ‚Üí {result['final']}"):
                    col1, col2 = st.columns(2)

                    with col1:
                        st.markdown("**Â§âÊõ¥ÁêÜÁî±:**")
                        st.write(f"- {result['reason']}")
                        if result['original'] != result['sanitized']:
                            st.write(f"- „Çµ„Éã„Çø„Ç§„Ç∫: {result['original']} ‚Üí {result['sanitized']}")

                    with col2:
                        st.markdown("**ÊúÄÁµÇ„Éï„Ç°„Ç§„É´Âêç:**")
                        st.code(result['final'])

        if ok_files:
            st.success(f"‚úÖ {len(ok_files)}ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´„ÅØÂïèÈ°å„ÅÇ„Çä„Åæ„Åõ„Çì")

            with st.expander("ÂïèÈ°å„ÅÆ„Å™„ÅÑ„Éï„Ç°„Ç§„É´‰∏ÄË¶ß"):
                for result in ok_files:
                    st.write(f"- {result['final']}")

        # Á¢∫Ë™ç„Å®ÂÆüË°å
        st.markdown("---")

        col1, col2 = st.columns(2)

        with col1:
            if st.button("‚úÖ „Åì„ÅÆÂÜÖÂÆπ„ÅßÂá¶ÁêÜ„ÇíÁ∂öË°å", type="primary", use_container_width=True):
                # „Éï„Ç°„Ç§„É´„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
                for result in processing_results:
                    if result['final'] not in st.session_state.uploaded_files_list:
                        st.session_state.uploaded_files_list.append(result['final'])

                # „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„Å´‰øùÂ≠ò
                st.session_state.processed_files = processing_results
                st.success("„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")

                # Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å∏„ÅÆÊ°àÂÜÖ
                st.info("„Äå„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁÆ°ÁêÜ„Äç„Çø„Éñ„ÅßÂêÑ„Éï„Ç°„Ç§„É´„ÅÆË©≥Á¥∞Ë®≠ÂÆö„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ")

        with col2:
            if st.button("‚ùå „Ç≠„É£„É≥„Çª„É´", use_container_width=True):
                st.info("Âá¶ÁêÜ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü")
                st.rerun()


def create_batch_rename_tool():
    """‰∏ÄÊã¨„É™„Éç„Éº„É†„ÉÑ„Éº„É´"""

    st.header("üîÑ ‰∏ÄÊã¨„Éï„Ç°„Ç§„É´ÂêçÂ§âÊõ¥")

    st.info("""
    Â§ñÈÉ®„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâÂèñÂæó„Åó„ÅüHTML„Éï„Ç°„Ç§„É´„ÅÆÂêçÂâç„Çí‰∏ÄÊã¨„ÅßÂ§âÊõ¥„Åß„Åç„Åæ„Åô„ÄÇ
    Áâπ„Å´ `index.html` „Å™„Å©„ÅÆÁ´∂Âêà„Åó„ÇÑ„Åô„ÅÑ„Éï„Ç°„Ç§„É´Âêç„ÇíÂÆâÂÖ®„Å™ÂêçÂâç„Å´Â§âÊõ¥„Åó„Åæ„Åô„ÄÇ
    """)

    # „É™„Éç„Éº„É†„É´„Éº„É´„ÅÆË®≠ÂÆö
    st.subheader("üìù „É™„Éç„Éº„É†„É´„Éº„É´Ë®≠ÂÆö")

    col1, col2 = st.columns(2)

    with col1:
        prefix = st.text_input(
            "„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„ÇπÔºàÊé•È†≠ËæûÔºâ",
            value="dashboard_",
            help="„Éï„Ç°„Ç§„É´Âêç„ÅÆÂÖàÈ†≠„Å´ËøΩÂä†„Åô„ÇãÊñáÂ≠óÂàó"
        )

        suffix = st.text_input(
            "„Çµ„Éï„Ç£„ÉÉ„ÇØ„ÇπÔºàÊé•Â∞æËæûÔºâ",
            value="",
            help="Êã°ÂºµÂ≠ê„ÅÆÂâç„Å´ËøΩÂä†„Åô„ÇãÊñáÂ≠óÂàó"
        )

    with col2:
        naming_pattern = st.selectbox(
            "ÂëΩÂêç„Éë„Çø„Éº„É≥",
            [
                "„Ç™„É™„Ç∏„Éä„É´Âêç„Çí‰øùÊåÅ",
                "ÈÄ£Áï™„Çí‰ªò‰∏é",
                "Êó•‰ªò„Çí‰ªò‰∏é",
                "„Éè„ÉÉ„Ç∑„É•„Çí‰ªò‰∏é"
            ]
        )

        replace_index = st.checkbox(
            "index.html„ÇíËá™ÂãïÂ§âÊèõ",
            value=True,
            help="index.html„ÅØÂøÖ„Åömain-dashboard.html„Å´Â§âÊèõ"
        )

    # „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éï„Ç°„Ç§„É´Âêç„É™„Çπ„Éà
    st.subheader("üß™ „É™„Éç„Éº„É†„ÉÜ„Çπ„Éà")

    test_filenames = st.text_area(
        "„ÉÜ„Çπ„ÉàÁî®„Éï„Ç°„Ç§„É´ÂêçÔºà1Ë°å„Å´1„Å§Ôºâ",
        value="index.html\nhome.html\nreport_2024.html\nË®∫ÁôÇÁßëÂà•.html\nward-performance.html",
        height=150
    )

    if st.button("üîç „É™„Éç„Éº„É†ÁµêÊûú„Çí„Éó„É¨„Éì„É•„Éº"):
        filenames = [f.strip() for f in test_filenames.split('\n') if f.strip()]

        handler = FileNameConflictHandler()
        results = []

        for i, filename in enumerate(filenames):
            # „Çµ„Éã„Çø„Ç§„Ç∫
            sanitized = handler.sanitize_filename(filename)

            # „Éë„Çø„Éº„É≥„Å´Âøú„Åò„ÅüÂ§âÊèõ
            if naming_pattern == "ÈÄ£Áï™„Çí‰ªò‰∏é":
                name, ext = os.path.splitext(sanitized)
                new_name = f"{prefix}{i+1:03d}_{name}{suffix}{ext}"
            elif naming_pattern == "Êó•‰ªò„Çí‰ªò‰∏é":
                name, ext = os.path.splitext(sanitized)
                date_str = datetime.now().strftime('%Y%m%d')
                new_name = f"{prefix}{date_str}_{name}{suffix}{ext}"
            elif naming_pattern == "„Éè„ÉÉ„Ç∑„É•„Çí‰ªò‰∏é":
                name, ext = os.path.splitext(sanitized)
                hash_str = hashlib.md5(filename.encode()).hexdigest()[:6]
                new_name = f"{prefix}{name}_{hash_str}{suffix}{ext}"
            else:  # „Ç™„É™„Ç∏„Éä„É´Âêç„Çí‰øùÊåÅ
                name, ext = os.path.splitext(sanitized)
                new_name = f"{prefix}{name}{suffix}{ext}"

            # index.html „ÅÆÁâπÂà•Âá¶ÁêÜ
            if replace_index and filename.lower() == 'index.html':
                new_name = 'main-dashboard.html'

            results.append({
                'original': filename,
                'sanitized': sanitized,
                'final': new_name
            })

        # ÁµêÊûúË°®Á§∫
        st.markdown("### Â§âÊèõÁµêÊûú")

        # „Éá„Éº„Çø„Éï„É¨„Éº„É†„ÅßË°®Á§∫
        import pandas as pd
        df = pd.DataFrame(results)
        st.dataframe(df, use_container_width=True)

        # Â§âÊèõ„É´„Éº„É´„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
        if st.button("üì• Â§âÊèõ„É´„Éº„É´„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà"):
            rules = {
                'prefix': prefix,
                'suffix': suffix,
                'pattern': naming_pattern,
                'replace_index': replace_index,
                'mappings': {r['original']: r['final'] for r in results}
            }

            st.download_button(
                "„É´„Éº„É´„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                json.dumps(rules, indent=2, ensure_ascii=False),
                file_name=f"rename_rules_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )


def add_conflict_handling_to_main_app():
    """„É°„Ç§„É≥„Ç¢„Éó„É™„Å´Á´∂ÂêàÂá¶ÁêÜÊ©üËÉΩ„ÇíËøΩÂä†"""

    tab1, tab2, tab3 = st.tabs([
        "üì§ ÂÆâÂÖ®„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ",
        "üîÑ ‰∏ÄÊã¨„É™„Éç„Éº„É†",
        "üìã Á´∂Âêà„ÉÅ„Çß„ÉÉ„Ç´„Éº"
    ])

    with tab1:
        create_conflict_aware_uploader()

    with tab2:
        create_batch_rename_tool()

    with tab3:
        st.header("üîç „Éï„Ç°„Ç§„É´ÂêçÁ´∂Âêà„ÉÅ„Çß„ÉÉ„Ç´„Éº")

        st.info("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂâç„Å´„Éï„Ç°„Ç§„É´Âêç„ÅÆÁ´∂Âêà„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åß„Åç„Åæ„Åô")

        # „Éï„Ç°„Ç§„É´ÂêçÂÖ•Âäõ
        check_filename = st.text_input(
            "„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åü„ÅÑ„Éï„Ç°„Ç§„É´Âêç",
            value="index.html",
            help="Á´∂Âêà„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç„Åó„Åæ„Åô"
        )

        if st.button("üîç „ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å"):
            handler = FileNameConflictHandler()

            # „Çµ„Éã„Çø„Ç§„Ç∫
            sanitized = handler.sanitize_filename(check_filename)

            # Á´∂Âêà„ÉÅ„Çß„ÉÉ„ÇØ
            is_reserved = check_filename.lower() in [n.lower() for n in handler.RESERVED_NAMES]

            # ÁµêÊûúË°®Á§∫
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üìä „ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú")

                if is_reserved:
                    st.error("‚ùå „Ç∑„Çπ„ÉÜ„É†‰∫àÁ¥Ñ„Éï„Ç°„Ç§„É´Âêç„Åß„Åô")
                    st.warning("„Åì„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÅØ‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì")
                else:
                    st.success("‚úÖ ‰ΩøÁî®ÂèØËÉΩ„Å™„Éï„Ç°„Ç§„É´Âêç„Åß„Åô")

                if check_filename != sanitized:
                    st.info(f"„Çµ„Éã„Çø„Ç§„Ç∫Âæå: {sanitized}")

            with col2:
                st.markdown("### üí° Êé®Â•®„Åï„Çå„Çã‰ª£ÊõøÂêç")

                if is_reserved and check_filename.lower() in handler.RENAME_RULES:
                    st.write(f"‚Ä¢ {handler.RENAME_RULES[check_filename.lower()]}")

                # „Åù„ÅÆ‰ªñ„ÅÆ‰ª£ÊõøÊ°à
                name, ext = os.path.splitext(sanitized)
                alternatives = [
                    f"{name}_dashboard{ext}",
                    f"{name}_page{ext}",
                    f"{name}_{datetime.now().strftime('%Y%m%d')}{ext}",
                    f"custom_{name}{ext}"
                ]

                for alt in alternatives:
                    st.write(f"‚Ä¢ {alt}")

        # ‰∫àÁ¥Ñ„Éï„Ç°„Ç§„É´Âêç‰∏ÄË¶ß
        with st.expander("üìã „Ç∑„Çπ„ÉÜ„É†‰∫àÁ¥Ñ„Éï„Ç°„Ç§„É´Âêç‰∏ÄË¶ß"):
            for reserved in FileNameConflictHandler.RESERVED_NAMES:
                st.write(f"‚Ä¢ {reserved}")

            st.info("""
            „Åì„Çå„Çâ„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÅØÁâπÂà•„Å™Áî®ÈÄî„Åß‰ΩøÁî®„Åï„Çå„Çã„Åü„ÇÅ„ÄÅ
            „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éï„Ç°„Ç§„É´„Å´„ÅØ‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ
            """)

class GitHubConnectionTester:
    """GitHubÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà„Åô„Çã„ÇØ„É©„Çπ"""

    @staticmethod
    def test_connection(token: str, repo_name: str) -> Dict:
        """GitHubÊé•Á∂ö„ÅÆË©≥Á¥∞„ÉÜ„Çπ„Éà"""

        results = {
            'connection': False,
            'authentication': False,
            'repository_access': False,
            'write_permission': False,
            'github_pages': False,
            'branch_info': {},
            'rate_limit': {},
            'errors': []
        }

        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }

        try:
            # 1. Ë™çË®º„ÉÜ„Çπ„Éà
            with st.spinner("Ë™çË®ºÊÉÖÂ†±„ÇíÁ¢∫Ë™ç‰∏≠..."):
                auth_response = requests.get(
                    'https://api.github.com/user',
                    headers=headers,
                    timeout=10
                )

                if auth_response.status_code == 200:
                    results['authentication'] = True
                    user_info = auth_response.json()
                    results['user_info'] = {
                        'login': user_info.get('login'),
                        'name': user_info.get('name'),
                        'email': user_info.get('email')
                    }
                else:
                    results['errors'].append(f"Ë™çË®º„Ç®„É©„Éº: {auth_response.status_code}")
                    return results

            # 2. „É™„Éù„Ç∏„Éà„É™„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà
            with st.spinner("„É™„Éù„Ç∏„Éà„É™„Ç¢„ÇØ„Çª„Çπ„ÇíÁ¢∫Ë™ç‰∏≠..."):
                repo_url = f"https://api.github.com/repos/{repo_name}"
                repo_response = requests.get(repo_url, headers=headers, timeout=10)

                if repo_response.status_code == 200:
                    results['repository_access'] = True
                    repo_info = repo_response.json()
                    results['repo_info'] = {
                        'name': repo_info.get('full_name'),
                        'private': repo_info.get('private'),
                        'default_branch': repo_info.get('default_branch'),
                        'created_at': repo_info.get('created_at'),
                        'size': repo_info.get('size')
                    }

                    # Êõ∏„ÅçËæº„ÅøÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
                    permissions = repo_info.get('permissions', {})
                    results['write_permission'] = permissions.get('push', False)
                else:
                    results['errors'].append(f"„É™„Éù„Ç∏„Éà„É™„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº: {repo_response.status_code}")
                    return results

            # 3. „Éñ„É©„É≥„ÉÅÊÉÖÂ†±ÂèñÂæó
            with st.spinner("„Éñ„É©„É≥„ÉÅÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠..."):
                branches_url = f"{repo_url}/branches"
                branches_response = requests.get(branches_url, headers=headers, timeout=10)

                if branches_response.status_code == 200:
                    branches = branches_response.json()
                    results['branch_info'] = {
                        'count': len(branches),
                        'names': [b['name'] for b in branches]
                    }

            # 4. GitHub PagesÁä∂ÊÖãÁ¢∫Ë™ç
            with st.spinner("GitHub PagesË®≠ÂÆö„ÇíÁ¢∫Ë™ç‰∏≠..."):
                pages_url = f"{repo_url}/pages"
                pages_response = requests.get(pages_url, headers=headers, timeout=10)

                if pages_response.status_code == 200:
                    results['github_pages'] = True
                    pages_info = pages_response.json()
                    results['pages_info'] = {
                        'url': pages_info.get('html_url'),
                        'status': pages_info.get('status'),
                        'source': pages_info.get('source')
                    }
                elif pages_response.status_code == 404:
                    results['github_pages'] = False
                    results['pages_info'] = {'status': 'Êú™Ë®≠ÂÆö'}

            # 5. API„É¨„Éº„ÉàÂà∂ÈôêÁ¢∫Ë™ç
            rate_limit_response = requests.get(
                'https://api.github.com/rate_limit',
                headers=headers,
                timeout=10
            )

            if rate_limit_response.status_code == 200:
                rate_data = rate_limit_response.json()
                core_rate = rate_data.get('rate', {})
                results['rate_limit'] = {
                    'limit': core_rate.get('limit'),
                    'remaining': core_rate.get('remaining'),
                    'reset': datetime.fromtimestamp(core_rate.get('reset', 0)).strftime('%Y-%m-%d %H:%M:%S')
                }

            results['connection'] = True

        except requests.exceptions.Timeout:
            results['errors'].append("Êé•Á∂ö„Çø„Ç§„É†„Ç¢„Ç¶„Éà")
        except requests.exceptions.ConnectionError:
            results['errors'].append("„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Ç®„É©„Éº")
        except Exception as e:
            results['errors'].append(f"‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº: {str(e)}")

        return results

    @staticmethod
    def display_test_results(results: Dict):
        """„ÉÜ„Çπ„ÉàÁµêÊûú„ÇíË¶ã„ÇÑ„Åô„ÅèË°®Á§∫"""

        if results['connection']:
            st.success("‚úÖ GitHubÊé•Á∂öÊàêÂäüÔºÅ")

            # Ë©≥Á¥∞ÊÉÖÂ†±„ÅÆË°®Á§∫
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üë§ Ë™çË®ºÊÉÖÂ†±")
                if results['authentication']:
                    user_info = results.get('user_info', {})
                    st.success(f"‚úì „É¶„Éº„Ç∂„Éº: {user_info.get('login', 'N/A')}")
                    if user_info.get('name'):
                        st.info(f"ÂêçÂâç: {user_info['name']}")

                st.markdown("### üìÅ „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±")
                if results['repository_access']:
                    repo_info = results.get('repo_info', {})
                    st.success(f"‚úì {repo_info.get('name', 'N/A')}")
                    st.info(f"„Éñ„É©„É≥„ÉÅ: {repo_info.get('default_branch', 'N/A')}")

                    if results['write_permission']:
                        st.success("‚úì Êõ∏„ÅçËæº„ÅøÊ®©Èôê„ÅÇ„Çä")
                    else:
                        st.error("‚úó Êõ∏„ÅçËæº„ÅøÊ®©Èôê„Å™„Åó")

            with col2:
                st.markdown("### üåê GitHub Pages")
                if results['github_pages']:
                    pages_info = results.get('pages_info', {})
                    st.success("‚úì ÊúâÂäπ")
                    if pages_info.get('url'):
                        st.info(f"URL: {pages_info['url']}")
                else:
                    st.warning("‚ö†Ô∏è GitHub PagesÊú™Ë®≠ÂÆö")
                    st.caption("ÂÖ¨ÈñãÊôÇ„Å´Ëá™ÂãïË®≠ÂÆö„Åï„Çå„Åæ„Åô")

                st.markdown("### üìä API‰ΩøÁî®Áä∂Ê≥Å")
                rate_limit = results.get('rate_limit', {})
                if rate_limit:
                    remaining = rate_limit.get('remaining', 0)
                    limit = rate_limit.get('limit', 0)
                    percentage = (remaining / limit * 100) if limit > 0 else 0

                    st.metric(
                        "ÊÆã„ÇäAPIÂëº„Å≥Âá∫„Åó",
                        f"{remaining:,} / {limit:,}",
                        f"{percentage:.1f}%"
                    )
                    st.caption(f"„É™„Çª„ÉÉ„Éà: {rate_limit.get('reset', 'N/A')}")

        else:
            st.error("‚ùå GitHubÊé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")

            if results['errors']:
                st.markdown("### „Ç®„É©„ÉºË©≥Á¥∞")
                for error in results['errors']:
                    st.error(f"‚Ä¢ {error}")

            # „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞
            with st.expander("üîß „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞"):
                st.markdown("""
                **„Çà„Åè„ÅÇ„ÇãÂïèÈ°å„Å®Ëß£Ê±∫ÊñπÊ≥ï:**

                1. **Ë™çË®º„Ç®„É©„Éº (401)**
                   - Personal Access Token„ÅåÊ≠£„Åó„ÅÑ„ÅãÁ¢∫Ë™ç
                   - „Éà„Éº„ÇØ„É≥„ÅÆÊúâÂäπÊúüÈôê„ÇíÁ¢∫Ë™ç
                   - ÂøÖË¶Å„Å™Ê®©ÈôêÔºàrepoÔºâ„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç

                2. **„É™„Éù„Ç∏„Éà„É™„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ (404)**
                   - „É™„Éù„Ç∏„Éà„É™Âêç„ÅÆÂΩ¢Âºè: `username/repository-name`
                   - „Éó„É©„Ç§„Éô„Éº„Éà„É™„Éù„Ç∏„Éà„É™„ÅÆÂ†¥Âêà„ÅØrepoÊ®©Èôê„ÅåÂøÖË¶Å

                3. **„Ç¢„ÇØ„Çª„ÇπÊãíÂê¶ (403)**
                   - API„É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„ÅüÂèØËÉΩÊÄß
                   - „Éà„Éº„ÇØ„É≥„ÅÆÊ®©Èôê‰∏çË∂≥

                4. **„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº**
                   - „Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç
                   - „Éï„Ç°„Ç§„Ç¢„Ç¶„Ç©„Éº„É´Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç
                """)


def create_enhanced_dashboard_app():
    """Êã°ÂºµÁâà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁÆ°ÁêÜ„Ç¢„Éó„É™"""

    st.set_page_config(
        page_title="Dashboard Publisher Pro",
        page_icon="üöÄ",
        layout="wide"
    )

    st.title("üöÄ „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁµ±ÂêàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† Pro")

    # „Éá„Éï„Ç©„É´„Éà„ÅßË°®Á§∫„Åô„Çã„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆÊÉÖÂ†±„ÇíÂÆöÁæ©
    default_dashboards = [
        {
            'filename': 'https://genie-scripts.github.io/Streamlit-Dashboard/index01/',
            'button_name': 'ÂÖ•Èô¢ÂàÜÊûê„É¨„Éù„Éº„Éà',
            'short_description': 'ÈÅéÂéª12ÈÄ±Èñì„ÅÆÂÖ•Èô¢ÊÇ£ËÄÖÊï∞„ÇÑÂú®Èô¢Êó•Êï∞„ÅÆ„Éà„É¨„É≥„Éâ„ÇíÂàÜÊûê„Åó„Åæ„Åô„ÄÇ',
            'icon': 'üè•',
            'category': '‰∏ªË¶Å„É¨„Éù„Éº„Éà',
            'tags': ['manual', 'admission-analysis'],
            'priority': 1,
            'visible': True,
            'update_frequency': 'ÈÄ±Ê¨°',
            'responsible_person': 'ÂàÜÊûê„ÉÅ„Éº„É†',
            'data_source': 'DWH',
            'last_updated': datetime.now().isoformat(),
            'custom_css_class': ''
        },
        {
            'filename': 'https://genie-scripts.github.io/Streamlit-Dashboard/index02/',
            'button_name': 'ÂÖ•Èô¢ÂàÜÊûê„É¨„Éù„Éº„Éà', # Âêå„Åò„Éú„Çø„É≥Âêç„Åß„ÇÇÂèØ
            'short_description': 'ÊúÄÊñ∞„ÅÆË©ï‰æ°Âü∫Ê∫ñ„Å´Âü∫„Å•„ÅÑ„ÅüÂÖ•Èô¢Áä∂Ê≥Å„ÅÆÂàÜÊûê„É¨„Éù„Éº„Éà„Åß„Åô„ÄÇ',
            'icon': 'üìä',
            'category': '‰∏ªË¶Å„É¨„Éù„Éº„Éà',
            'tags': ['manual', 'evaluation-criteria'],
            'priority': 2,
            'visible': True,
            'update_frequency': 'ÈÄ±Ê¨°',
            'responsible_person': 'ÂàÜÊûê„ÉÅ„Éº„É†',
            'data_source': 'DWH',
            'last_updated': datetime.now().isoformat(),
            'custom_css_class': ''
        }
    ]

    # „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„Å´„É°„Çø„Éá„Éº„Çø„É™„Çπ„Éà„Åå„Å™„Åë„Çå„Å∞„ÄÅ„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅßÂàùÊúüÂåñ
    if 'dashboard_metadata' not in st.session_state:
        st.session_state.dashboard_metadata = default_dashboards

    # „Çµ„Ç§„Éâ„Éê„Éº - GitHubË®≠ÂÆö„Å®Êé•Á∂ö„ÉÜ„Çπ„Éà
    with st.sidebar:
        st.header("‚öôÔ∏è GitHubË®≠ÂÆö")

        github_token = st.text_input(
            "Personal Access Token",
            type="password",
            help="repoÊ®©Èôê„ÇíÊåÅ„Å§„Éà„Éº„ÇØ„É≥",
            value="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"  # ‚òÖÂ§âÊõ¥ÁÇπ: „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíË®≠ÂÆö
        )

        repo_name = st.text_input(
            "„É™„Éù„Ç∏„Éà„É™Âêç",
            value="Genie-Scripts/Streamlit-Dashboard",  # ‚òÖÂ§âÊõ¥ÁÇπ: „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíË®≠ÂÆö
            help="‰æã: john-doe/dashboard-site"
        )

        # Êé•Á∂ö„ÉÜ„Çπ„Éà„Éú„Çø„É≥ÔºàÂº∑Ë™øË°®Á§∫Ôºâ
        st.markdown("---")
        if st.button("üîç GitHubÊé•Á∂ö„ÉÜ„Çπ„Éà", type="primary", use_container_width=True):
            if github_token and repo_name:
                tester = GitHubConnectionTester()

                with st.spinner("Êé•Á∂ö„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠..."):
                    results = tester.test_connection(github_token, repo_name)

                # ÁµêÊûú„ÇíË°®Á§∫
                tester.display_test_results(results)

                # ÊàêÂäüÊôÇ„ÅØ„Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„Å´‰øùÂ≠ò
                if results['connection'] and results['write_permission']:
                    st.session_state.github_connected = True
                    st.session_state.github_token = github_token
                    st.session_state.repo_name = repo_name
                    st.session_state.connection_results = results
            else:
                st.error("GitHub„Éà„Éº„ÇØ„É≥„Å®„É™„Éù„Ç∏„Éà„É™Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

        # Êé•Á∂öÁä∂ÊÖã„ÅÆË°®Á§∫
        if st.session_state.get('github_connected'):
            st.success("‚úÖ Êé•Á∂öÊ∏à„Åø")
            if st.button("üîÑ ÂÜçÊé•Á∂ö", use_container_width=True):
                st.session_state.github_connected = False
                st.rerun()
        else:
            st.info("üëÜ Êé•Á∂ö„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

    # „É°„Ç§„É≥„Ç®„É™„Ç¢
    tab1, tab2, tab3, tab4 = st.tabs([
        "üì§ „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ",
        "üìù „É°„Çø„Éá„Éº„ÇøË®≠ÂÆö",
        "üëÄ „Éó„É¨„Éì„É•„Éº",
        "üöÄ ÂÖ¨Èñã"
    ])

    metadata_manager = DashboardMetadataManager()

    with tab1:
        st.header("HTML„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ")

        # FileNameConflictHandler„Çí„Ç§„É≥„Çπ„Çø„É≥„ÇπÂåñ
        handler = FileNameConflictHandler()

        uploaded_files = st.file_uploader(
            "HTML„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû",
            type=['html', 'htm'],
            accept_multiple_files=True
        )

        if uploaded_files:
            processed_files = []
            # Êó¢Â≠ò„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÇíÊääÊè°„Åô„Çã„Åü„ÇÅ„Å´Á©∫„ÅÆ„É™„Çπ„Éà„Åã„ÇâÂßã„ÇÅ„Çã
            existing_filenames = []

            for file in uploaded_files:
                original_name = file.name

                # 1. „Éï„Ç°„Ç§„É´Âêç„ÇíÂÆâÂÖ®„Å™ÂΩ¢Âºè„Å´Â§âÊèõ
                sanitized_name = handler.sanitize_filename(original_name)

                # 2. Á´∂ÂêàÔºà‰∫àÁ¥ÑË™û or ÈáçË§áÔºâ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                has_conflict, reason = handler.check_conflict(sanitized_name, existing_filenames)

                if has_conflict:
                    # 3. Á´∂Âêà„Åå„ÅÇ„Çå„Å∞Ëá™Âãï„Åß„É™„Éç„Éº„É†
                    final_name = handler.resolve_conflict(sanitized_name, existing_filenames)
                    st.warning(f"„Éï„Ç°„Ç§„É´Âêç„ÅåÁ´∂Âêà/‰∫àÁ¥ÑË™û„ÅÆ„Åü„ÇÅ„É™„Éç„Éº„É†„Åï„Çå„Åæ„Åó„Åü: „Äå{original_name}„Äç ‚Üí „Äå**{final_name}**„Äç ({reason})")
                else:
                    final_name = sanitized_name

                # Âá¶ÁêÜÁµêÊûú„Çí‰øùÂ≠ò
                processed_files.append({
                    'original_filename': original_name,
                    'filename': final_name,  # ‚òÖÂæåÁ∂öÂá¶ÁêÜ„Åß‰Ωø„ÅÜ„Éï„Ç°„Ç§„É´Âêç
                    'size': f"{file.size / 1024:.1f} KB",
                    'file_object': file
                })
                # Ê¨°„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ„Åü„ÇÅ„Å´„ÄÅÁ¢∫ÂÆö„Åó„Åü„Éï„Ç°„Ç§„É´Âêç„ÇíËøΩÂä†
                existing_filenames.append(final_name)

            # Âá¶ÁêÜÁµêÊûú„Çí„Éá„Éº„Çø„Éï„É¨„Éº„É†„ÅßË°®Á§∫
            st.markdown("#### „Éï„Ç°„Ç§„É´Âá¶ÁêÜÁµêÊûú")
            df_display = pd.DataFrame([
                {'ÂÖÉ„Éï„Ç°„Ç§„É´Âêç': r['original_filename'], 'ÂÖ¨Èñã„Éï„Ç°„Ç§„É´Âêç': r['filename']}
                for r in processed_files
            ])
            st.dataframe(df_display, use_container_width=True)

            if st.button("Ê¨°„Å∏: „É°„Çø„Éá„Éº„ÇøË®≠ÂÆö", type="primary"):
                # ‚òÖ„É™„Éç„Éº„É†Âæå„ÅÆÊÉÖÂ†±„ÇíÂê´„ÇÄ„É™„Çπ„Éà„Çí„Çª„ÉÉ„Ç∑„Éß„É≥„Å´‰øùÂ≠ò
                st.session_state.uploaded_files_data = processed_files
                st.session_state.current_tab = "metadata"
                st.rerun()

    with tab2:
        st.header("„É°„Çø„Éá„Éº„ÇøË®≠ÂÆö")

        if 'uploaded_files_data' not in st.session_state:
            st.warning("„Åæ„Åö„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        else:
            files_data = st.session_state.uploaded_files_data

            st.info(f"{len(files_data)}ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíË®≠ÂÆö„Åó„Åæ„Åô")

            # ‰∏ÄÊã¨Ë®≠ÂÆö
            with st.expander("‚ö° ‰∏ÄÊã¨Ë®≠ÂÆö"):
                col1, col2, col3 = st.columns(3)

                with col1:
                    bulk_category = st.selectbox(
                        "ÂÖ®„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™",
                        ["Â§âÊõ¥„Åó„Å™„ÅÑ", "ÁµåÂñ∂ÂàÜÊûê", "Ë®∫ÁôÇÂÆüÁ∏æ", "ÁóÖÊ£üÁÆ°ÁêÜ", "Ë≤°ÂãôÂ†±Âëä", "ÂìÅË≥™ÊåáÊ®ô", "„Åù„ÅÆ‰ªñ"]
                    )

                with col2:
                    bulk_frequency = st.selectbox(
                        "ÂÖ®„Å¶„ÅÆÊõ¥Êñ∞È†ªÂ∫¶",
                        ["Â§âÊõ¥„Åó„Å™„ÅÑ", "„É™„Ç¢„É´„Çø„Ç§„É†", "Êó•Ê¨°", "ÈÄ±Ê¨°", "ÊúàÊ¨°", "ÂõõÂçäÊúü", "Âπ¥Ê¨°", "‰∏çÂÆöÊúü"]
                    )

                with col3:
                    bulk_responsible = st.text_input("ÂÖ®„Å¶„ÅÆË≤¨‰ªªËÄÖ")

                if st.button("‰∏ÄÊã¨ÈÅ©Áî®"):
                    st.success("‰∏ÄÊã¨Ë®≠ÂÆö„ÇíÈÅ©Áî®„Åó„Åæ„Åó„Åü")

            # ÂÄãÂà•Ë®≠ÂÆö
            metadata_list = []

            for i, file_info in enumerate(files_data):
                metadata = metadata_manager.create_metadata_form(file_info, i)
                metadata_list.append(metadata)

            # ‰øùÂ≠ò„Éú„Çø„É≥
            col1, col2 = st.columns(2)

            with col1:
                if st.button("„É°„Çø„Éá„Éº„Çø„Çí‰øùÂ≠ò", type="primary", use_container_width=True):
                    st.session_state.dashboard_metadata = metadata_list
                    st.success("„É°„Çø„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü")

                    # JSON„Ç®„ÇØ„Çπ„Éù„Éº„Éà
                    metadata_json = json.dumps(metadata_list, indent=2, ensure_ascii=False)
                    st.download_button(
                        "üì• „É°„Çø„Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà",
                        metadata_json,
                        file_name=f"dashboard_metadata_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )

            with col2:
                if st.button("Ê¨°„Å∏: „Éó„É¨„Éì„É•„Éº", use_container_width=True):
                    st.session_state.current_tab = "preview"
                    st.rerun()

    with tab3:
        st.header("„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éó„É¨„Éì„É•„Éº")

        if 'dashboard_metadata' not in st.session_state:
            st.warning("„É°„Çø„Éá„Éº„Çø„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        else:
            metadata_list = st.session_state.dashboard_metadata

            # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
            col1, col2, col3 = st.columns(3)

            with col1:
                filter_category = st.selectbox(
                    "„Ç´„ÉÜ„Ç¥„É™„Åß„Éï„Ç£„É´„Çø",
                    ["„Åô„Åπ„Å¶"] + list(set(m['category'] for m in metadata_list))
                )

            with col2:
                sort_by = st.selectbox(
                    "‰∏¶„Å≥È†Ü",
                    ["ÂÑ™ÂÖàÂ∫¶È†Ü", "ÂêçÂâçÈ†Ü", "Êõ¥Êñ∞Êó•È†Ü", "„Ç´„ÉÜ„Ç¥„É™È†Ü"]
                )

            with col3:
                view_mode = st.radio(
                    "Ë°®Á§∫„É¢„Éº„Éâ",
                    ["„Ç´„Éº„Éâ", "„É™„Çπ„Éà", "„Ç∞„É™„ÉÉ„Éâ"],
                    horizontal=True
                )

            # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Å®‰∏¶„Å≥Êõø„Åà
            filtered_metadata = metadata_list

            if filter_category != "„Åô„Åπ„Å¶":
                filtered_metadata = [m for m in filtered_metadata if m['category'] == filter_category]

            if sort_by == "ÂÑ™ÂÖàÂ∫¶È†Ü":
                filtered_metadata.sort(key=lambda x: x['priority'])
            elif sort_by == "ÂêçÂâçÈ†Ü":
                filtered_metadata.sort(key=lambda x: x['button_name'])
            elif sort_by == "Êõ¥Êñ∞Êó•È†Ü":
                filtered_metadata.sort(key=lambda x: x['last_updated'], reverse=True)
            elif sort_by == "„Ç´„ÉÜ„Ç¥„É™È†Ü":
                filtered_metadata.sort(key=lambda x: x['category'])

            # Ë°®Á§∫
            st.markdown(f"### {len(filtered_metadata)}ÂÄã„ÅÆ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ")

            if view_mode == "„Ç´„Éº„Éâ":
                # „Ç´„Éº„ÉâË°®Á§∫
                cols = st.columns(3)
                for i, metadata in enumerate(filtered_metadata):
                    with cols[i % 3]:
                        card_html = f"""
                        <div style="
                            background: white;
                            border-radius: 10px;
                            padding: 20px;
                            margin-bottom: 20px;
                            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                            border-left: 4px solid #667eea;
                            height: 200px;
                            display: flex;
                            flex-direction: column;
                        ">
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                                <span style="font-size: 2em;">{metadata['icon']}</span>
                                <h4 style="margin: 0; flex: 1;">{metadata['button_name']}</h4>
                            </div>
                            <p style="color: #666; flex: 1;">{metadata['short_description']}</p>
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 10px;">
                                <span style="background: #f0f0f0; padding: 4px 8px; border-radius: 4px; font-size: 0.8em;">
                                    {metadata['category']}
                                </span>
                                <span style="color: #999; font-size: 0.8em;">
                                    {metadata['update_frequency']}
                                </span>
                            </div>
                        </div>
                        """
                        st.markdown(card_html, unsafe_allow_html=True)

            elif view_mode == "„É™„Çπ„Éà":
                # „É™„Çπ„ÉàË°®Á§∫
                for metadata in filtered_metadata:
                    with st.container():
                        col1, col2, col3, col4 = st.columns([1, 3, 2, 1])

                        with col1:
                            st.markdown(f"### {metadata['icon']}")

                        with col2:
                            st.markdown(f"**{metadata['button_name']}**")
                            st.caption(metadata['short_description'])

                        with col3:
                            st.caption(f"„Ç´„ÉÜ„Ç¥„É™: {metadata['category']}")
                            st.caption(f"Êõ¥Êñ∞: {metadata['update_frequency']}")

                        with col4:
                            st.caption(f"ÂÑ™ÂÖàÂ∫¶: {metadata['priority']}")

                        st.markdown("---")

            else:  # „Ç∞„É™„ÉÉ„ÉâË°®Á§∫
                # „Éá„Éº„Çø„Éï„É¨„Éº„É†Ë°®Á§∫
                df_display = pd.DataFrame([
                    {
                        '„Ç¢„Ç§„Ç≥„É≥': m['icon'],
                        '„Éú„Çø„É≥Âêç': m['button_name'],
                        'Ë™¨Êòé': m['short_description'],
                        '„Ç´„ÉÜ„Ç¥„É™': m['category'],
                        'Êõ¥Êñ∞È†ªÂ∫¶': m['update_frequency'],
                        'ÂÑ™ÂÖàÂ∫¶': m['priority']
                    }
                    for m in filtered_metadata
                ])

                st.dataframe(df_display, use_container_width=True)

    with tab4:
        st.header("GitHub PagesÂÖ¨Èñã")

        if not st.session_state.get('github_connected'):
            st.error("‚ùå GitHub„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
            st.info("„Çµ„Ç§„Éâ„Éê„Éº„ÅßGitHubÊé•Á∂ö„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

        elif 'dashboard_metadata' not in st.session_state:
            st.error("‚ùå „É°„Çø„Éá„Éº„Çø„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")

        else:
            st.success("‚úÖ ÂÖ¨ÈñãÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ")

            # ÂÖ¨ÈñãË®≠ÂÆö
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üìä ÂÖ¨ÈñãÂÜÖÂÆπ")
                metadata_list = st.session_state.dashboard_metadata
                st.metric("„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊï∞", len(metadata_list))
                st.metric("„Ç´„ÉÜ„Ç¥„É™Êï∞", len(set(m['category'] for m in metadata_list)))

                # Ë°®Á§∫„Åï„Çå„Çã„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
                visible_count = sum(1 for m in metadata_list if m['visible'])
                st.metric("Ë°®Á§∫„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ", visible_count)

            with col2:
                st.markdown("### ‚öôÔ∏è ÂÖ¨Èñã„Ç™„Éó„Ç∑„Éß„É≥")

                branch = st.selectbox(
                    "„Éñ„É©„É≥„ÉÅ",
                    ["main", "gh-pages", "master"],
                    help="GitHub Pages„Åß‰ΩøÁî®„Åô„Çã„Éñ„É©„É≥„ÉÅ"
                )

                minify_html = st.checkbox(
                    "HTML„ÇíÊúÄÂ∞èÂåñ",
                    value=False,
                    help="„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÇíÂâäÊ∏õ"
                )

                create_sitemap = st.checkbox(
                    "„Çµ„Ç§„Éà„Éû„ÉÉ„ÉóÁîüÊàê",
                    value=True,
                    help="SEOÂØæÁ≠ñÁî®„ÅÆsitemap.xml"
                )

                enable_analytics = st.checkbox(
                    "„Ç¢„ÇØ„Çª„ÇπËß£Êûê",
                    value=True,  # ‚òÖÂ§âÊõ¥ÁÇπ: „Éá„Éï„Ç©„É´„Éà„ÅßON„Å´
                    help="Google AnalyticsÁ≠â„ÅÆËøΩÂä†"
                )

            st.markdown("---")

            # ÂÖ¨ÈñãÂâç„ÅÆÊúÄÁµÇÁ¢∫Ë™ç
            with st.expander("üìã ÂÖ¨ÈñãÂâç„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà", expanded=True):
                checks = {
                    "GitHubÊé•Á∂ö": st.session_state.get('github_connected', False),
                    "Êõ∏„ÅçËæº„ÅøÊ®©Èôê": st.session_state.get('connection_results', {}).get('write_permission', False),
                    "„É°„Çø„Éá„Éº„ÇøË®≠ÂÆö": 'dashboard_metadata' in st.session_state,
                    "„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ": 'uploaded_files_data' in st.session_state,
                    "ÂøÖÈ†àÈ†ÖÁõÆÂÖ•Âäõ": all(m['button_name'] and m['short_description'] for m in metadata_list)
                }

                all_checks_passed = all(checks.values())

                for check_name, check_status in checks.items():
                    if check_status:
                        st.success(f"‚úÖ {check_name}")
                    else:
                        st.error(f"‚ùå {check_name}")

                if not all_checks_passed:
                    st.warning("ÂÖ®„Å¶„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Çí„Éë„Çπ„Åó„Å¶„Åã„ÇâÂÖ¨Èñã„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

            # ÂÖ¨ÈñãÂÆüË°å„Éú„Çø„É≥
            if st.button("üöÄ GitHub Pages„Å´ÂÖ¨Èñã", type="primary", use_container_width=True,
                        disabled=not all_checks_passed):

                with st.spinner("ÂÖ¨ÈñãÂá¶ÁêÜ„ÇíÂÆüË°å‰∏≠..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    try:
                        # GitHub„Éë„Éñ„É™„ÉÉ„Ç∑„É£„Éº„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
                        publisher = HTMLDashboardPublisher(
                            repo_owner=st.session_state.repo_name.split('/')[0],
                            repo_name=st.session_state.repo_name.split('/')[1],
                            token=st.session_state.github_token,
                            branch=branch
                        )

                        # 1. index.html„ÅÆÁîüÊàê„Å®ÂÖ¨Èñã
                        status_text.text("„É°„Ç§„É≥„Éö„Éº„Ç∏„ÇíÁîüÊàê‰∏≠...")

                        config = {
                            'dashboard_title': 'üè• Áµ±Âêà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ',
                            'dashboard_subtitle': '„Åô„Åπ„Å¶„ÅÆ„É¨„Éù„Éº„Éà„Å®„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ',
                            'primary_color': '#667eea',
                            'secondary_color': '#764ba2',
                            'show_stats': True,
                            'footer_text': '¬© 2025 Dashboard System'
                        }

                        # „É°„Çø„Éá„Éº„Çø„ÇíHTMLÁîüÊàêÁî®„Å´Â§âÊèõ
                        html_files_info = []
                        for metadata in metadata_list:
                            if metadata['visible']:
                                html_files_info.append({
                                    'filename': metadata['filename'],
                                    'title': metadata['button_name'],
                                    'icon': metadata['icon'],
                                    'description': metadata['short_description'],
                                    'update_time': datetime.now().strftime('%Y/%m/%d %H:%M')
                                })

                        # ‚òÖÂ§âÊõ¥ÁÇπ: enable_analytics„ÅÆÂÄ§„ÇíÊ∏°„Åô
                        index_html = publisher.create_dashboard_index(html_files_info, config, enable_ga=enable_analytics)
                        success, message = publisher.upload_file(index_html, "index.html")

                        if not success:
                            st.error(f"„É°„Ç§„É≥„Éö„Éº„Ç∏„ÅÆÂÖ¨Èñã„Å´Â§±Êïó: {message}")
                            return

                        progress_bar.progress(20)

                        # 2. ÂêÑHTML„Éï„Ç°„Ç§„É´„ÅÆÂÖ¨Èñã
                        files_data = st.session_state.uploaded_files_data
                        total_files = len(files_data)

                        for i, (file_data, metadata) in enumerate(zip(files_data, metadata_list)):
                            if metadata['visible']:
                                status_text.text(f"„Éï„Ç°„Ç§„É´„ÇíÂÖ¨Èñã‰∏≠... ({i+1}/{total_files})")

                                # „Éï„Ç°„Ç§„É´ÂÜÖÂÆπ„ÇíË™≠„ÅøËæº„Åø
                                file_obj = file_data['file_object']
                                content = file_obj.read().decode('utf-8')
                                file_obj.seek(0)

                                # HTML„ÇíÂá¶ÁêÜ
                                processed_html = publisher.process_html_file(content, metadata['filename'])

                                # „É°„Çø„Éá„Éº„Çø„ÇíHTML„Å´Ê≥®ÂÖ•
                                meta_injection = f"""
                                <meta name="dashboard-name" content="{metadata['button_name']}">
                                <meta name="dashboard-description" content="{metadata['short_description']}">
                                <meta name="dashboard-category" content="{metadata['category']}">
                                <meta name="dashboard-update-frequency" content="{metadata['update_frequency']}">
                                """

                                if '</head>' in processed_html:
                                    processed_html = processed_html.replace('</head>', f'{meta_injection}</head>')

                                # „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
                                success, message = publisher.upload_file(processed_html, metadata['filename'])

                                if not success:
                                    st.warning(f"{metadata['filename']}„ÅÆÂÖ¨Èñã„Å´Â§±Êïó: {message}")

                                progress = 20 + int((i + 1) / total_files * 60)
                                progress_bar.progress(progress)

                        # 3. ËøΩÂä†„Éï„Ç°„Ç§„É´„ÅÆÁîüÊàê
                        status_text.text("ËøΩÂä†„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê‰∏≠...")

                        # „Çµ„Ç§„Éà„Éû„ÉÉ„ÉóÁîüÊàê
                        if create_sitemap:
                            sitemap_content = generate_sitemap(publisher.get_public_url(), html_files_info)
                            publisher.upload_file(sitemap_content, "sitemap.xml")

                        # robots.txtÁîüÊàê
                        robots_content = f"""User-agent: *
Allow: /

Sitemap: {publisher.get_public_url()}sitemap.xml
"""
                        publisher.upload_file(robots_content, "robots.txt")

                        progress_bar.progress(90)

                        # 4. Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ‰øùÂ≠ò
                        status_text.text("Ë®≠ÂÆö„Çí‰øùÂ≠ò‰∏≠...")

                        dashboard_config = {
                            'metadata': metadata_list,
                            'config': config,
                            'last_updated': datetime.now().isoformat(),
                            'total_dashboards': len(metadata_list),
                            'visible_dashboards': sum(1 for m in metadata_list if m['visible'])
                        }

                        config_json = json.dumps(dashboard_config, indent=2, ensure_ascii=False)
                        publisher.upload_file(config_json, "dashboard_config.json")

                        progress_bar.progress(100)
                        status_text.text("ÂÖ¨ÈñãÂÆå‰∫ÜÔºÅ")

                        # ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„Å®ÁµêÊûúË°®Á§∫
                        public_url = publisher.get_public_url()

                        st.balloons()
                        st.success("üéâ ÂÖ¨Èñã„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")

                        col1, col2 = st.columns(2)

                        with col1:
                            st.info(f"üåê ÂÖ¨ÈñãURL: {public_url}")
                            st.markdown(f"[„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÇíÈñã„Åè]({public_url})")

                        with col2:
                            st.metric("ÂÖ¨Èñã„Éï„Ç°„Ç§„É´Êï∞", len([m for m in metadata_list if m['visible']]))
                            st.metric("Á∑èÂÆπÈáè", f"{sum(float(f['size'].replace(' KB', '')) for f in files_data):.1f} KB")

                        # ÂÖ¨ÈñãÂ±•Ê≠¥„Çí‰øùÂ≠ò
                        if 'publish_history' not in st.session_state:
                            st.session_state.publish_history = []

                        st.session_state.publish_history.append({
                            'timestamp': datetime.now().isoformat(),
                            'url': public_url,
                            'dashboards': len([m for m in metadata_list if m['visible']]),
                            'total_size': sum(float(f['size'].replace(' KB', '')) for f in files_data)
                        })

                        # QR„Ç≥„Éº„ÉâÁîüÊàê„Ç™„Éó„Ç∑„Éß„É≥
                        if st.checkbox("QR„Ç≥„Éº„Éâ„ÇíÁîüÊàê"):
                            import qrcode
                            import io

                            qr = qrcode.QRCode(version=1, box_size=10, border=5)
                            qr.add_data(public_url)
                            qr.make(fit=True)

                            img = qr.make_image(fill_color="black", back_color="white")
                            buf = io.BytesIO()
                            img.save(buf, format='PNG')

                            st.image(buf.getvalue(), width=200)
                            st.caption("„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Åß„Çπ„Ç≠„É£„É≥„Åó„Å¶„Ç¢„ÇØ„Çª„Çπ")

                    except Exception as e:
                        st.error(f"ÂÖ¨Èñã‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {str(e)}")
                        import traceback
                        st.code(traceback.format_exc())

            # ÂÖ¨ÈñãÂ±•Ê≠¥
            if 'publish_history' in st.session_state and st.session_state.publish_history:
                with st.expander("üìú ÂÖ¨ÈñãÂ±•Ê≠¥"):
                    for history in reversed(st.session_state.publish_history[-5:]):
                        timestamp = datetime.fromisoformat(history['timestamp'])
                        st.write(f"""
                        **{timestamp.strftime('%Y/%m/%d %H:%M:%S')}**
                        URL: {history['url']}
                        „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊï∞: {history['dashboards']}
                        Á∑èÂÆπÈáè: {history['total_size']:.1f} KB
                        """)
                        st.markdown("---")


def generate_sitemap(base_url: str, dashboards: List[Dict]) -> str:
    """„Çµ„Ç§„Éà„Éû„ÉÉ„ÉóXML„ÇíÁîüÊàê"""

    sitemap = f"""<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>{base_url}</loc>
        <lastmod>{datetime.now().strftime('%Y-%m-%d')}</lastmod>
        <changefreq>daily</changefreq>
        <priority>1.0</priority>
    </url>
"""

    for dashboard in dashboards:
        sitemap += f"""    <url>
        <loc>{base_url}{dashboard['filename']}</loc>
        <lastmod>{datetime.now().strftime('%Y-%m-%d')}</lastmod>
        <changefreq>daily</changefreq>
        <priority>0.8</priority>
    </url>
"""

    sitemap += "</urlset>"
    return sitemap


def create_metadata_import_export():
    """„É°„Çø„Éá„Éº„Çø„ÅÆ„Ç§„É≥„Éù„Éº„Éà/„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ"""

    st.header("üìã „É°„Çø„Éá„Éº„ÇøÁÆ°ÁêÜ")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üì• „Ç§„É≥„Éù„Éº„Éà")

        uploaded_json = st.file_uploader(
            "„É°„Çø„Éá„Éº„ÇøJSON„Éï„Ç°„Ç§„É´",
            type=['json'],
            help="‰ª•Ââç„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åü„É°„Çø„Éá„Éº„Çø„Éï„Ç°„Ç§„É´"
        )

        if uploaded_json:
            try:
                metadata = json.load(uploaded_json)
                st.success(f"{len(metadata)}ÂÄã„ÅÆ„É°„Çø„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü")

                # „Éó„É¨„Éì„É•„Éº
                with st.expander("„Éó„É¨„Éì„É•„Éº"):
                    for m in metadata[:3]:
                        st.write(f"‚Ä¢ {m['icon']} {m['button_name']} - {m['short_description']}")
                    if len(metadata) > 3:
                        st.write(f"... ‰ªñ {len(metadata) - 3} ‰ª∂")

                if st.button("„Ç§„É≥„Éù„Éº„ÉàÂÆüË°å"):
                    st.session_state.dashboard_metadata = metadata
                    st.success("„É°„Çø„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà„Åó„Åæ„Åó„Åü")
                    st.rerun()

            except Exception as e:
                st.error(f"„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº: {str(e)}")

    with col2:
        st.subheader("üì§ „Ç®„ÇØ„Çπ„Éù„Éº„Éà")

        if 'dashboard_metadata' in st.session_state:
            metadata = st.session_state.dashboard_metadata

            st.info(f"{len(metadata)}ÂÄã„ÅÆ„É°„Çø„Éá„Éº„Çø")

            # „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂΩ¢ÂºèÈÅ∏Êäû
            export_format = st.selectbox(
                "„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂΩ¢Âºè",
                ["JSON", "CSV", "Excel"]
            )

            if export_format == "JSON":
                json_data = json.dumps(metadata, indent=2, ensure_ascii=False)
                st.download_button(
                    "üì• JSON„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                    json_data,
                    file_name=f"dashboard_metadata_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )

            elif export_format == "CSV":
                import csv
                import io

                output = io.StringIO()
                if metadata:
                    writer = csv.DictWriter(output, fieldnames=metadata[0].keys())
                    writer.writeheader()
                    writer.writerows(metadata)

                st.download_button(
                    "üì• CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                    output.getvalue(),
                    file_name=f"dashboard_metadata_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )

            elif export_format == "Excel":
                df = pd.DataFrame(metadata)

                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False, sheet_name='Metadata')

                st.download_button(
                    "üì• Excel„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                    output.getvalue(),
                    file_name=f"dashboard_metadata_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        else:
            st.warning("„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åô„Çã„É°„Çø„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")


# „É°„Ç§„É≥ÂÆüË°å
if __name__ == "__main__":
    create_enhanced_dashboard_app()